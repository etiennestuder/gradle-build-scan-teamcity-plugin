import org.gradle.util.GradleVersion

import static java.lang.Integer.parseInt

plugins {
    id 'nu.studer.plugindev' version '4.1'
    id 'com.gradle.plugin-publish' version '1.1.0'
    id 'org.nosphere.gradle.github.actions' version '1.3.2'
    id 'groovy'
}

group = 'nu.studer'
version = '1.2-DEV'

repositories {
    maven {
        // required for compileOnly dependency on build scan plugin API
        url 'https://plugins.gradle.org/m2/'
    }
}

configurations {
    gradleEnterprisePlugin
}

dependencies {
    gradleEnterprisePlugin 'com.gradle:gradle-enterprise-gradle-plugin:3.6.4'

    compileOnly 'com.gradle:gradle-enterprise-gradle-plugin:3.6.4'

    testImplementation 'io.ratpack:ratpack-groovy-test:1.9.0'
    testImplementation 'org.spockframework:spock-core:2.2-groovy-3.0'
}

project.configurations.matching { c -> ['testCompileClasspath', 'testRuntimeClasspath'].contains(c.name) }.all {
    resolutionStrategy.with {
        eachDependency {
            if (requested.group == 'org.codehaus.groovy') {
                useVersion GroovySystem.getVersion()
            }
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

tasks.withType(AbstractCompile).configureEach {
    options.compilerArgs <<
        "-Werror" <<
        "-Xlint:all"
}

tasks.withType(Test).configureEach {
    maxParallelForks = 1 // there is currently only a single test class
    useJUnitPlatform()

    environment('TEAMCITY_VERSION', '2020.2.2')
    jvmArgumentProviders.add(new PluginUnderTestCommandLineArgumentProvider(gradleEnterprisePlugin: configurations.gradleEnterprisePlugin))

    String testJavaRuntimeVersion = findProperty('testJavaRuntimeVersion') ?: '8'
    String testGradleVersion = findProperty('testGradleVersion') ?: GradleVersion.current().version

    javaLauncher.set(javaToolchains.launcherFor { spec ->
        spec.languageVersion.set(JavaLanguageVersion.of(testJavaRuntimeVersion))
        buildScan.value(identityPath.path + "#jvmVersion", testJavaRuntimeVersion)
    } as Provider<? extends JavaLauncher>)

    systemProperty 'testContext.gradleVersion', testGradleVersion
    buildScan.value(identityPath.path + "#gradleVersion", testGradleVersion)

    def incompatibleJavaVsGradleVersions = parseInt(testJavaRuntimeVersion) > 16 && GradleVersion.version(testGradleVersion) < GradleVersion.version('7.3') ||
        parseInt(testJavaRuntimeVersion) > 15 && GradleVersion.version(testGradleVersion) < GradleVersion.version('7.0')
    if (incompatibleJavaVsGradleVersions) {
        enabled = false
    }
}

gradlePlugin {
    website = 'https://github.com/etiennestuder/gradle-build-scan-teamcity-plugin'
    vcsUrl = 'https://github.com/etiennestuder/gradle-build-scan-teamcity-plugin'
    plugins {
        pluginDevPlugin {
            id = 'nu.studer.build-scan.teamcity'
            displayName = 'gradle-build-scan-teamcity-plugin'
            description = 'Gradle plugin for build scans that notifies TeamCity when a build scan is published during a build.'
            tags.set(['build scan', 'teamcity'])
            implementationClass = 'nu.studer.gradle.buildscan.teamcity.TeamCityBuildScanPlugin'
        }
    }
}

final class PluginUnderTestCommandLineArgumentProvider implements CommandLineArgumentProvider {

    @Classpath
    FileCollection gradleEnterprisePlugin

    @Override
    Iterable<String> asArguments() {
        [
            "-DgradleEnterprisePluginClasspath=$gradleEnterprisePlugin.asPath"
        ]
    }

}
